CSCI 4041, Spring 2020, Programming Assignment 5
Due Friday, 2/28/20, 7:00 PM (submission link on Canvas)

A certain boarding school has hired you to manage their data.  The first thing you notice is that their student roster is sorted by name (alphabetically by last name, with first name breaking ties), and you think that there are likely scenarios where a list sorted by house and year in school is far more useful.  Each student is in one of four houses: Eagletalon, Lannister, Pufflehuff, and SNAKES.  Each student’s year in school is an integer between 1 and 8, inclusive (it used to be only 7, but administration found that the last year had too much content and had to be split in half).  You have a CSV file containing the name, year, and house of each student, sorted by name, and you would like to produce a version of it which is sorted in the following priority: house, then year, then name (so all Eagletalon 1 students would appear at the top of the list, in alphabetical order, then Eagletalon 2, and so on).
Since the CSV is already sorted by name, you realize that all you have to do is use a stable sort to sort the CSV by year, and then use a stable sort again to sort it by house, and you’ll have the format you want.
However, there’s a complication.  A powerful sorcerer has placed a curse on your computer that will turn you into a newt if you execute a Python file containing the characters “>” or “<”, even if they’re part of a comment or a string.  So, you’ve decided to use Counting Sort, since it doesn’t require any comparisons and runs in Θ(n) time.

Download the PA5.py template from the course website, the six test rosters roster1.csv through roster6.csv, and their correctly sorted versions roster1sorted.csv through roster6sorted.csv from Canvas (not shared publicly for student privacy reasons).  The tests are all contained in a single ZIP file, PA5tests.zip, which is available in the Files tab on Canvas  The template contains a Student class, which holds information about Students.  The file also includes some code for turning the CSV file data into lists of Student objects, and test cases based on those CSV test files (make sure they’re in the same folder as your PA5.py script).  You’ll need to implement Counting Sort, similar to the pseudocode in Chapter 8, to get the program to work.
Since you will be needing to run Counting Sort twice, once to sort the students by year, and once to sort the resulting list by house, you may want to create a helper function to do a single round of Counting Sort, and one to map house strings to numbers so that you can use Counting Sort on the house data (the order is Eagletalon, Lannister, Pufflehuff, SNAKES).

Requirements:
You must download the template file PA5.py and edit the SortStudents function.  You may also create your own helper functions, but do not edit anything below the “DO NOTE EDIT” line of the file
You are not permitted to use any built-in Python sorting routines like the sorted() function or the .sort() list method.  You are also not allowed to use any Python function that asks for user input, such as input(), as this will break the grading script.  Finally, you are not permitted to use the characters ‘>’ or ‘<’ anywhere in the file, including in comments, since we don’t want you to be turned into a newt.
You must implement the Counting Sort algorithm found in Chapter 8 of the textbook.  Any other sorting algorithm will receive very little credit.
However, note that while the textbook algorithm describes how to sort a list of numbers once, this problem requires you to sort a list of Student objects twice, so the algorithm may need some adjustments.
In particular, note that while the textbook Counting Sort algorithm took in an input array A, an output array B, and a cap on the number of possible values k, your Sort will only take in an input list studentList.  You can just hard code in the k values for the number of possible years (8) and the number of houses (4).  You will be returning the output list rather than passing it in as an argument.
This assignment will be graded automatically based on the number of test cases your program passes.  There will be several secret test cases in addition to the ones included in the template to ensure you’re not hard-coding in the solutions.
