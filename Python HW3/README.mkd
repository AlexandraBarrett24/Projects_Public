CSCI 4041, Spring 2020, Programming Assignment 3
Due Friday, 2/14/19, 7:00 PM (submission link on Canvas)

You are placed in charge of the email servers as part of your unpaid internship at Holistic Synergies, Ltd.  Your supervisor, Dr. Boss Manager III, has compromised company security by leaking data to hackers over email on multiple occasions.  However, he has a solution.  After watching a certain sci-fi movie series, Dr. Manager has come to the conclusion that hackers always use short, trendy names like “Neo” or “Cypher”.  Therefore, rather than displaying emails in order from newest to oldest, he orders you to reprogram the server to display emails from longest sender name to shortest, so that all of the emails from people with short hacker names are pushed to the bottom.
Speed is of the utmost importance to Holistic Synergies, Ltd., so you will be implementing this email sorting routine in Quicksort.  However, Dr. Manager believes that his ancient enemy, Ted from Accounting, will take advantage of Quicksort’s O(n2) worst-case runtime to slow down his email by sending many consecutive emails from aliases of ever-increasing length.  So, he also requires that a backup implementation be created using Merge Sort.

Download the template PA3.py from the class website.  The template includes a Email class, which consists of two instance variables: sender, which is a string representing the name of the person or entity who sent the email, and subject, which is a string representing the subject line of the email.  The file also includes some test cases representing sample inboxes for Holistic Synergies, Ltd. employees.  You’ll need to implement Merge Sort and Quicksort algorithms which operate on a list of Email objects, and sort them in non-increasing order by the length of the sender string (that is, longest sender name to shortest).


Requirements:
You must download the template file PA3.py and edit the merge, merge_sort, partition, and quick_sort functions.  Do not edit any other part of the file.
You are not permitted to use any built-in Python sorting routines like the sorted() function or the .sort() list method.  You are also not allowed to use any Python function that asks for user input, such as input(), as this will break the grading script.  You may not import any modules other than traceback, which is already imported by the template.
You must implement the Quicksort and Merge Sort algorithms as described in the textbook.  Any other sorting algorithms will receive very little credit, even if you pass every test case. 
However, note that while the textbook algorithms describe how to sort a list of numbers in non-decreasing order, this problem requires you to sort a list of Email objects in non-increasing order by length of sender name, so you will need to adjust the algorithm slightly.
The textbook version of Merge Sort is a stable algorithm; your Merge Sort must also be stable; the final Merge Sort test case checks this.  Quicksort is not stable, so yours does not have to be.
You will need to use something in place of the sentinel ∞ values used in the textbook’s Merge function, since putting ∞ into a list of Email objects to be sorted by sender name length doesn’t make sense.  There is an Email object that you could construct that would work as a sentinel, but if you can’t figure that out, feel free to adjust your Merge algorithm to operate without sentinels.
This assignment will be graded automatically based on the number of test cases your program passes.  There will be several secret test cases in addition to the ones included in the template to ensure you’re not hard-coding in the solutions.
